---
name: OpenWISP Monitoring CI Build

on:
  push:
    branches:
      - master
      - dev
      - "1.1"
  pull_request:
    branches:
      - master
      - dev
      - "1.1"

jobs:
  build:
    name: Python==${{ matrix.python-version }} | ${{ matrix.django-version }}
    runs-on: ubuntu-22.04

    services:
      redis:
        image: redis
        ports:
          - 6379:6379

    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.8"
          - "3.9"
          - "3.10"
        django-version:
          - django~=3.2.0
          - django~=4.1.0
          - django~=4.2.0

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            **/requirements*.txt

      - name: Install Dependencies & Start InfluxDB Container
        id: deps
        run: |
          sudo apt update -qq
          sudo apt -qq install \
            sqlite3 \
            fping \
            gdal-bin \
            libproj-dev \
            libgeos-dev \
            libspatialite-dev \
            spatialite-bin \
            libsqlite3-mod-spatialite

          pip install -U pip wheel setuptools
          pip install -r requirements-test.txt
          pip install -U -I -e .
          pip uninstall -y django
          pip install -U ${{ matrix.django-version }}
          sudo npm install -g jshint stylelint

          # start influxdb
          docker compose up -d influxdb



      - name: Install libproj-5.2.0 and spatiaLite-4.3.0 for Django 3.2
        if: matrix.django-version == 'django~=3.2.0'
        run: |
          sudo apt purge -y \
            libproj-dev \
            libspatialite-dev \
            spatialite-bin \
            libsqlite3-mod-spatialite

          # Install libproj 5.3.0
          wget https://download.osgeo.org/proj/proj-5.2.0.tar.gz
          tar -xzf proj-5.2.0.tar.gz
          cd proj-5.2.0
          ./configure --prefix=/usr/local
          make -j$(nproc)
          sudo make install
          cd ..

          export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
          export CFLAGS="-I/usr/local/include"
          export LDFLAGS="-L/usr/local/lib"

          # Install SpatiaLite 4.3.0
          wget https://www.gaia-gis.it/gaia-sins/libspatialite-sources/libspatialite-4.3.0.tar.gz
          tar xaf libspatialite-4.3.0.tar.gz
          cd libspatialite-4.3.0
          ./configure
          make
          sudo make install
          cd ..

          echo "LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "SPATIALITE_LIBRARY_PATH=/usr/local/lib/mod_spatialite.so" >> $GITHUB_ENV
        working-directory: /tmp

      - name: QA checks
        run: |
          ./run-qa-checks

      - name: Tests
        if: ${{ !cancelled() && steps.deps.conclusion == 'success' }}
        run: |
          coverage run runtests.py --exclude-tag selenium_tests
          SAMPLE_APP=1 coverage run runtests.py --exclude-tag selenium_tests
          TIMESERIES_UDP=1 coverage run runtests.py --exclude-tag selenium_tests
          coverage combine
          coverage xml

      - name: Upload Coverage
        if: ${{ success() }}
        uses: coverallsapp/github-action@v2
        with:
          parallel: true
          format: cobertura
          flag-name: python-${{ matrix.python-version }}-${{ matrix.django-version }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    name: Deploy Docker Image
    runs-on: ubuntu-24.04
    needs:
      - build

    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
    steps:
      - uses: actions/checkout@master

      # the following action is equivalent to
      # echo "$DOCKER_HUB_SECRET" | docker login --username "$DOCKER_HUB_USERNAME" --password-stdin
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_SECRET }}

      - name: Push to Docker
        run: |
          docker build . -t openwisp/openwisp-monitoring:develop
          docker push openwisp/openwisp-monitoring:develop

  coveralls:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Coveralls Finished
        uses: coverallsapp/github-action@v2
        with:
          parallel-finished: true
